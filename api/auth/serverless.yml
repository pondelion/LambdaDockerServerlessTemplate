service: lambda-docker-template-api-auth

plugins:
  - serverless-offline

provider:
  name: aws
  profile: default
  stage: ${opt:stage,"dev"}
  region: ap-northeast-1
  memorySize: 2048
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:ListBucket'
          Resource:
            - "*"
        - Effect: 'Allow'
          Action:
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
          Resource:
            - "*"
        - Effect: Allow
          Action: 
            - 'ecr:*'
            - 'ecr-public:*'
            - 'sts:GetServiceBearerToken'
          Resource:
            - "*"
        - Effect: 'Allow'
          Action:
            - 'lambda:*'
            - 'cognito:*'
            - 'apigateway:*'
          Resource:
            - ${env:COGNITO_USER_POOL_ARN}
  environment:
    TZ: Asia/Tokyo
    ENV1: ${env:ENV1}
    ENV2: ${env:ENV2}

functions:
  api_endpoint_with_auth:
    image:
      uri:
        - ${env:IMAGE_URL}
      command:
        - api.endpoint1
    timeout: 30
    events:
      - http:
          path: api/v1/endpoint_with_auth
          method: get
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:COGNITO_USER_POOL_ARN}
    environment:
      HOGE1: 'hoge1'
  api_endpoint_without_auth:
    image:
      uri:
        - ${env:IMAGE_URL}
      command:
        - api.endpoint2
    timeout: 30
    events:
      - http:
          path: api/v1/endpoint_without_auth
          method: get
          cors: true
    environment:
      HOGE2: 'hoge2'
